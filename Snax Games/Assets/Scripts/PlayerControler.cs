//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerControler.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControler: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControler()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControler"",
    ""maps"": [
        {
            ""name"": ""Computer"",
            ""id"": ""fb3d08cf-1d76-4f72-a47d-0a0105460759"",
            ""actions"": [
                {
                    ""name"": ""UpDirection"",
                    ""type"": ""Button"",
                    ""id"": ""3d497003-586c-4705-a7ac-9d4e740615b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownDirection"",
                    ""type"": ""Button"",
                    ""id"": ""bc647843-8748-479d-8524-88c6c6ab6791"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftDirection"",
                    ""type"": ""Button"",
                    ""id"": ""15cb3701-1e6f-41d9-ab03-9eaa0382bfac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightDirection"",
                    ""type"": ""Button"",
                    ""id"": ""d04e5110-5be1-4327-8c9f-04e4b92cab8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""940f1db9-6475-46ad-a9cd-199043fb40b9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbac84bd-c5db-42a6-8701-30e777cdd930"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0b219b2-e3fe-42f2-a9fb-11d35d2b81b4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba3e80da-8872-4e62-ae3c-3f2457c20b86"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f4f8da8-3bd4-4af3-a309-5e150597a22c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e7ccd8f-d1bd-409b-a3cf-6688f5b2778b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89f74298-ecce-431f-8d55-bf0c1aad1458"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a01a31a-25ca-46d8-9ec5-7bc36f79c24e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Computer
        m_Computer = asset.FindActionMap("Computer", throwIfNotFound: true);
        m_Computer_UpDirection = m_Computer.FindAction("UpDirection", throwIfNotFound: true);
        m_Computer_DownDirection = m_Computer.FindAction("DownDirection", throwIfNotFound: true);
        m_Computer_LeftDirection = m_Computer.FindAction("LeftDirection", throwIfNotFound: true);
        m_Computer_RightDirection = m_Computer.FindAction("RightDirection", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Computer
    private readonly InputActionMap m_Computer;
    private List<IComputerActions> m_ComputerActionsCallbackInterfaces = new List<IComputerActions>();
    private readonly InputAction m_Computer_UpDirection;
    private readonly InputAction m_Computer_DownDirection;
    private readonly InputAction m_Computer_LeftDirection;
    private readonly InputAction m_Computer_RightDirection;
    public struct ComputerActions
    {
        private @PlayerControler m_Wrapper;
        public ComputerActions(@PlayerControler wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpDirection => m_Wrapper.m_Computer_UpDirection;
        public InputAction @DownDirection => m_Wrapper.m_Computer_DownDirection;
        public InputAction @LeftDirection => m_Wrapper.m_Computer_LeftDirection;
        public InputAction @RightDirection => m_Wrapper.m_Computer_RightDirection;
        public InputActionMap Get() { return m_Wrapper.m_Computer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ComputerActions set) { return set.Get(); }
        public void AddCallbacks(IComputerActions instance)
        {
            if (instance == null || m_Wrapper.m_ComputerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ComputerActionsCallbackInterfaces.Add(instance);
            @UpDirection.started += instance.OnUpDirection;
            @UpDirection.performed += instance.OnUpDirection;
            @UpDirection.canceled += instance.OnUpDirection;
            @DownDirection.started += instance.OnDownDirection;
            @DownDirection.performed += instance.OnDownDirection;
            @DownDirection.canceled += instance.OnDownDirection;
            @LeftDirection.started += instance.OnLeftDirection;
            @LeftDirection.performed += instance.OnLeftDirection;
            @LeftDirection.canceled += instance.OnLeftDirection;
            @RightDirection.started += instance.OnRightDirection;
            @RightDirection.performed += instance.OnRightDirection;
            @RightDirection.canceled += instance.OnRightDirection;
        }

        private void UnregisterCallbacks(IComputerActions instance)
        {
            @UpDirection.started -= instance.OnUpDirection;
            @UpDirection.performed -= instance.OnUpDirection;
            @UpDirection.canceled -= instance.OnUpDirection;
            @DownDirection.started -= instance.OnDownDirection;
            @DownDirection.performed -= instance.OnDownDirection;
            @DownDirection.canceled -= instance.OnDownDirection;
            @LeftDirection.started -= instance.OnLeftDirection;
            @LeftDirection.performed -= instance.OnLeftDirection;
            @LeftDirection.canceled -= instance.OnLeftDirection;
            @RightDirection.started -= instance.OnRightDirection;
            @RightDirection.performed -= instance.OnRightDirection;
            @RightDirection.canceled -= instance.OnRightDirection;
        }

        public void RemoveCallbacks(IComputerActions instance)
        {
            if (m_Wrapper.m_ComputerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IComputerActions instance)
        {
            foreach (var item in m_Wrapper.m_ComputerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ComputerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ComputerActions @Computer => new ComputerActions(this);
    public interface IComputerActions
    {
        void OnUpDirection(InputAction.CallbackContext context);
        void OnDownDirection(InputAction.CallbackContext context);
        void OnLeftDirection(InputAction.CallbackContext context);
        void OnRightDirection(InputAction.CallbackContext context);
    }
}
